<!DOCTYPE html>
<html>

<head>
  <meta content="text/html;charset=utf-8" http-equiv="Content-Type">
  <meta content="utf-8" http-equiv="encoding">
  <title>COVID-19</title>

  <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Lato" />  
  
  <style>
    html,
    
    body {
      margin: 0;
      padding: 0;
      overflow: hidden;
    }

    .box {
      width: 1000px;
      height: 800px;
      position: absolute;
      top: 100px;
      left: 30px;
      opacity: 0.9;
    }

    .stack-top {
      z-index: 9;
    }

    .slider_top {
      width: 900px;
      height: 20px;
      position: absolute;
      opacity: 1.0;
      top: 810px;
      left: 30px;
      z-index: 9;
    }

    .title-text {
      position: absolute;
      font-size: 60px;
      color:white;
      font-family: "Lato";
      font-weight: 300;
      top: 20px;
      left: 30px;

      border-color: coral;
      border-style: solid;
      border-width: 1px;
    }

    .bar_label {
      font-size: 10px;
      fill:white;
      font-family: "Lato";
      font-weight: 300;
    }

    .value_text {
      font-size: 10px;
      fill:black;
      font-family: "Lato";
      font-weight: 300;
    }
  </style>
</head>

<body>
  <div>
    <svg class="box stack-top" style="background: white" id="header_box"></svg>
    <div class="title-text">Coronavirus, COVID-19</div>
    <input class="slider_top" type="range" name="mySlider" id=mySlider min="0" max="30" value="0">

    <!-- RENDERING ELEMENT -->
    <canvas id="renderCanvas"></canvas>    
  </div>

  

  <script src="js/three.min.js"></script> <!-- THREE JS library -->
  <script src="js/OrbitControls.js"></script> <!-- ORBIT CONTROLS library -->
  <script src="twitter_nodes.js"></script> <!-- DATA 01 -->
  <script src="twitter_edges.js"></script> <!-- DATA 02 -->
  <script src='js/dat.gui.min.js'></script> <!-- DAT GUI library -->
  <script src="js/d3.min.js"></script> <!-- D3 library -->

  <script src="bar_chart.js"></script>

  <script type="x-shader/x-vertex" id="nodes_vertexshader">

    // vertex attributes
    attribute vec3 degrees;               // node degrees - x:total, y:in, z:out
    attribute vec4 community_color;       // xyz: color, w: community_ID

    // uniforms
    uniform float camera_z;               // camera zoom value
    uniform vec4 min_max;                 // x: min_in, y: max_in, z: min_out, w: max_out
    uniform vec4 vertex_opacity_filter;   // x: in, y: out, z: total, none
    uniform vec2 point_sizes;             // x: min_point_size, y: max_point_size

    // attributes to fragment shader
    varying vec3 vec_degrees;             // node degrees - x:total, y:in, z:out
    varying vec4 vec_color;               // xyz: color, w: community_ID

    void main() {
      vec_degrees = degrees;              
      vec_color = community_color;        
      
      vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
      gl_Position = projectionMatrix * mvPosition;

      // calculate point sizes
      // output = output_start + ((output_end - output_start) / (input_end - input_start)) * (input - input_start)
      float size_none = point_sizes.x;
      float size_in = point_sizes.x+ (( point_sizes.y-point_sizes.x )/( min_max.y-min_max.x ))*( vec_degrees.y-min_max.x );
      float size_out = point_sizes.x + (( point_sizes.y-point_sizes.x )/( min_max.w-min_max.z ))*( vec_degrees.z-min_max.z );
      float tot_max = min_max.y + min_max.w;
      float tot_min = min_max.x + min_max.z;      
      float size_total = point_sizes.x + (( point_sizes.y - point_sizes.x )/( tot_max - tot_min ))*( vec_degrees.x - tot_min );

      // mask sizes depending on the selection 
      float size = vertex_opacity_filter.x * size_in + vertex_opacity_filter.y * size_out + vertex_opacity_filter.z * size_total + vertex_opacity_filter.w * size_none;

      gl_PointSize = size * camera_z;
    }
  </script>

  <script type="x-shader/x-fragment" id="nodes_fragmentshader">

    uniform sampler2D spriteTexture;
    
    uniform float opacity;

    varying vec3 vec_degrees;
    varying vec4 vec_color;
   
    void main() {
      vec4 spriteColor = texture2D( spriteTexture, gl_PointCoord );

      gl_FragColor = vec4( vec_color.r *1.4, vec_color.g *1.4, vec_color.b *1.4, spriteColor.a);
    }
  </script>

  <script type="x-shader/x-vertex" id="edges_vertexshader">

    attribute vec4 source_degrees;              // x: source_in, y: source_out, x: destination_in, y: destination_out 
    attribute vec4 source_community_color;      // x: community_color, y: community ID
    attribute vec3 source_destination;          // x: source_index, y: destination_index, z: is_source

    uniform vec2 community_filter;              // x: selected_community_ID, y: selection_filter_indicator
        
    varying vec4 degreeColor;
    varying vec4 communityColor;
    varying vec2 is_valid;
    varying vec3 fs_source_destination;

    void main() {

      degreeColor = source_degrees;
      communityColor = source_community_color;
      is_valid = community_filter;
      fs_source_destination = source_destination;
      
      vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
      gl_Position = projectionMatrix * mvPosition;

    }
  </script>

  <script type="x-shader/x-fragment" id="edges_fragmentshader">

    uniform float opacity;
    uniform vec4 vertex_opacity_filter;

    uniform vec2 selected_node;
    
    varying vec4 degreeColor;
    varying vec4 communityColor;
    varying vec2 is_valid;
    varying vec3 fs_source_destination;
    
    void main() {

      //discard if none selected
      if( selected_node.y == 1.0 ){
        if( selected_node.x < 0.0 )
          discard;

        bool is_out_edge = selected_node.x == fs_source_destination.x;
        bool is_in_edge = selected_node.x == fs_source_destination.y;
        // TEST
        if( !(is_out_edge || is_in_edge ) ){
          discard;
        }

        if(is_out_edge)
          gl_FragColor = vec4( 1.0, 0.0, 0.0, 0.5);
        if(is_in_edge)
          gl_FragColor = vec4( 0.0, 1.0, 0.0, 0.5);
      }
      else{
        // filter communities
        if ( is_valid.y > 0.0 ){
          if( communityColor.a != is_valid.x )
            discard;
        }

        float v_opacity = degreeColor.z * vertex_opacity_filter.x + degreeColor.y * vertex_opacity_filter.y + (degreeColor.x+degreeColor.y) * vertex_opacity_filter.z + vertex_opacity_filter.w;

        gl_FragColor = vec4(communityColor.rgb, v_opacity * opacity);
      }   
    }
  </script>

  <script type="x-shader/x-vertex" id="nodeLabel_vertexshader">
    //attribute vec2 uv; 

    varying vec2 v_uv;

    void main() {
      v_uv = uv;
        vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
      gl_Position = projectionMatrix * mvPosition;
    }
  </script>

  <script type="x-shader/x-fragment" id="nodeLabel_fragmentshader">

    uniform sampler2D in_texture;

    varying vec2 v_uv;
    void main() {
        vec4 tex_color = texture2D( in_texture, v_uv );
        if(pow(tex_color.x, 1.0) > 0.9)
          discard;
        //gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
        tex_color.r = 1.0 - tex_color.r;
        tex_color.g = 1.0 - tex_color.g;
        tex_color.b = 1.0 - tex_color.b;
        gl_FragColor = tex_color;
    }
  </script>



  <script>

    // data strings formatting
    twitter_nodes_fstring = twitter_nodes_str.replace(/[())]/g, "").replace(/ENDLINE/g, '\n');
    twitter_edges_fstring = twitter_edges_str.replace(/EENNDDLLIINNEE/g, '\n');

    //document.getElementById("output").innerHTML = twitter_edges_fstring;

    // data from string to arrays function
    var CSVToArray = function CSVToArray(data) {
      var delimiter =
        arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ",";
      var omitFirstRow =
        arguments.length > 2 && arguments[2] !== undefined
          ? arguments[2]
          : false;

      return data
        .slice(omitFirstRow ? data.indexOf("\n") + 1 : 0)
        .split("\n")
        .map(function (v) {
          return v.split(delimiter);
        });
    };

    // nodes array and edges array
    var twitter_nodes_array = CSVToArray(twitter_nodes_fstring, ",", true);
    var twitter_edges_array = CSVToArray(twitter_edges_fstring, ",", true);

    // ARRAY PROPERTIES
    var max_degree = -1;
    var min_degree = Infinity;

    var max_in_degree = -1;
    var min_in_degree = Infinity;

    var max_out_degree = -1;
    var min_out_degree = Infinity;

    // point community number
    var min_point_communnity = 0;
    var max_point_communnity = 0;


    //WINDOW, CANVAS and RENDERER
    var w = window.innerWidth;
    var h = window.innerHeight;

    var scene = new THREE.Scene();
    //var my_canvas = document.getElementById("myCanvas");
    var aspect = w / h;
    //var camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 10000);
    var camera = new THREE.OrthographicCamera(-w / 2, w / 2, h / 2, -h / 2, 0.0001, 20000);
    camera.position.z = 1000;

    var renderer = new THREE.WebGLRenderer({ antialias: true, canvas: renderCanvas });
    renderer.context.disable(renderer.context.DEPTH_TEST);
    renderer.setSize(w, h);
    renderer.sortObjects = false;
    //renderer.a

    //document.body.appendChild(renderer.domElement);

    // camera controls
    var controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableRotate = false;
    controls.enablePan = true;
    controls.addEventListener('change', render);
    controls.enableKeys = true;
    controls.keys = {
      LEFT: 37, //left arrow
      UP: 38, // up arrow
      RIGHT: 39, // right arrow
      BOTTOM: 40 // down arrow
    }
    controls.screenSpacePanning = true;

    var scaleFactor = 1;

    // event listeners
    renderer.domElement.addEventListener('click', raycast, false);
    renderer.domElement.addEventListener('touchend', onDocumentTouchEnd, false);


    // CALLBACK CUBE
    var cube_geometry;
    var cube_material;
    var cube_object;
    var cube_object_spawned = false;


    // CALLBACK TEST
    function function_with_callback(subject, callback) {
      console.log("Starting function with callback!: " + subject);
      setTimeout(function () {
        cube_geometry = new THREE.BoxGeometry(1, 1, 1);
        cube_material = new THREE.MeshNormalMaterial();
        cube_object = new THREE.Mesh(cube_geometry, cube_material);
        callback();
      }, 8000);
    }

    function_with_callback('argument value', function () {
      console.log("Callback function called!: ");
      //scene.add(cube_object);
      //cube_object_spawned = true;
    });


    // community ID to (random)color dict
    var community_color_dict = {};
    // index to ID dict
    var community_index_ID_dict = {};

    // NODES (BUFFER GEOMETRY)
    var twitter_node_geometry = new THREE.BufferGeometry();
    var nodes_length = twitter_nodes_array.length;
    console.log("NUMBER OF NODES: " + nodes_length);
    //attribute arrays
    var nodes_position_array = new Float32Array(nodes_length * 3);          // positions
    var nodes_deg_indeg_outdeg_array = new Float32Array(nodes_length * 3);  // degrees
    var nodes_color_array = new Float32Array(nodes_length * 4);             // color and community ID
    // fill buffer
    for (var row_i = 0; row_i < nodes_length; row_i++) {
      //twitter_nodes_geometry.vertices.push(new THREE.Vector3(parseFloat(twitter_nodes_array[i][14]) / scaleFactor, parseFloat(twitter_nodes_array[i][15]) / scaleFactor, 0));
      nodes_position_array[row_i * 3 + 0] = parseFloat(twitter_nodes_array[row_i][14]) / scaleFactor;
      nodes_position_array[row_i * 3 + 1] = parseFloat(twitter_nodes_array[row_i][15]) / scaleFactor;
      nodes_position_array[row_i * 3 + 2] = 0.01;

      // check community type, put it in the dictionary and give random color
      var p_community = twitter_nodes_array[row_i][1];
      if (!(p_community in community_color_dict)) {
        var rnd_r = Math.floor(Math.random() * 1001) / 1000.0;
        var rnd_g = Math.floor(Math.random() * 1001) / 1000.0;
        var rnd_b = Math.floor(Math.random() * 1001) / 1000.0;

        community_color_dict[p_community] = [rnd_r, rnd_g, rnd_b];
      }
      //console.log( "Dict: " + community_color_dict[p_community]);
      nodes_color_array[row_i * 4 + 0] = community_color_dict[p_community][0];
      nodes_color_array[row_i * 4 + 1] = community_color_dict[p_community][1];
      nodes_color_array[row_i * 4 + 2] = community_color_dict[p_community][2];
      nodes_color_array[row_i * 4 + 4] = parseFloat(twitter_nodes_array[row_i][1])

      //check min/max
      var degree = parseFloat(twitter_nodes_array[row_i][8]);
      var in_degree = parseFloat(twitter_nodes_array[row_i][9]);
      var out_degree = parseFloat(twitter_nodes_array[row_i][10]);

      if (degree > max_degree)
        max_degree = degree;
      if (degree < min_degree)
        min_degree = degree;

      if (in_degree > max_in_degree)
        max_in_degree = in_degree;
      if (in_degree < min_in_degree)
        min_in_degree = in_degree;

      if (out_degree > max_out_degree)
        max_out_degree = out_degree;
      if (out_degree < min_out_degree)
        min_out_degree = out_degree;

      // fill degrees attribute ( normalized between v_min_opacity and 1.0 )
      // output = output_start + ((output_end - output_start) / (input_end - input_start)) * (input - input_start)
      nodes_deg_indeg_outdeg_array[row_i * 3 + 0] = degree; // total degree
      nodes_deg_indeg_outdeg_array[row_i * 3 + 1] = in_degree; // in degree (followers)
      nodes_deg_indeg_outdeg_array[row_i * 3 + 2] = out_degree; // out degree (following)
    }

    // NODES add attributes to vertex buffer
    twitter_node_geometry.addAttribute('position', new THREE.BufferAttribute(nodes_position_array, 3));
    twitter_node_geometry.addAttribute('degrees', new THREE.BufferAttribute(nodes_deg_indeg_outdeg_array, 3));
    twitter_node_geometry.addAttribute('community_color', new THREE.BufferAttribute(nodes_color_array, 4));

    // iterate over keys in ID to Color dictionary
    // populat index to ID dictionary
    var num_of_keys = 0;
    for (const [key, value] of Object.entries(community_color_dict)) {
      community_index_ID_dict[num_of_keys] = parseInt(key);
      num_of_keys++;
    }
    for (const [key, value] of Object.entries(community_index_ID_dict)) {
      //console.log(key, value);
    }

    console.log("Max degree:  " + max_degree);
    console.log("Min degree:  " + min_degree);
    console.log("Max in_degree:  " + max_in_degree);
    console.log("Min in_degree:  " + min_in_degree);
    console.log("Max out_degree:  " + max_out_degree);
    console.log("Min out_degree:  " + min_out_degree);
    console.log("Min point community:  " + 0);
    console.log("Max point community:  " + (num_of_keys - 1));

    // NODES sprite texture
    var sprite_texture_loader = new THREE.TextureLoader();
    var sprite_texture = sprite_texture_loader.load(
      'https://i.ibb.co/g3RCpZd/circle.png',
      // onLoad callback
      (texture) => {
        // in this example we create the material when the texture is loaded
        sprite_texture.needsUpdate = true;
      },
      // onProgress callback currently not supported
      undefined,
      // onError callback
      (err) => {
        console.error('An error happened.');
      }
    );

    // NODES shader material
    var twitter_nodes_shader_material = new THREE.ShaderMaterial({
      uniforms: {
        //opacity: { value: deg_opacity.opacity }
        spriteTexture: { value: sprite_texture },
        camera_z: { value: camera.zoom },
        min_max: { value: [min_in_degree, max_in_degree, min_out_degree, max_out_degree] },
        vertex_opacity_filter: { value: [0.0, 0.0, 0.0, 1.0] },
        point_sizes: { value: [1.0, 25.0] }
        //color: { value: new THREE.Color( 0xffffff ) },
        //pointTexture: { value: texture }
      },
      vertexShader: document.getElementById('nodes_vertexshader').textContent,
      fragmentShader: document.getElementById('nodes_fragmentshader').textContent,
      blending: THREE.NormalBlending,
      depthTest: false,
      transparent: true
    });
    var twitter_NODES_object = new THREE.Points(twitter_node_geometry, twitter_nodes_shader_material);


    // GUI
    var gui = new dat.GUI({ width: 450, height: 5 * 32 - 1 });
    // node info folder
    var clicked_node_info = {
      cn_name: "",
      cn_community_id: "",
      cn_community_index: "",
      cn_in_degree: "",
      cn_out_degree: ""
    }
    var cn = gui.addFolder('Clicked Node Info');
    cn.closed = false;
    cn.add(clicked_node_info, 'cn_name').listen().name("Name");
    cn.add(clicked_node_info, 'cn_community_id').listen().name("Community ID");
    cn.add(clicked_node_info, 'cn_community_index').listen().name("Community Index");
    cn.add(clicked_node_info, 'cn_in_degree').listen().name("In Degree");
    cn.add(clicked_node_info, 'cn_out_degree').listen().name("Out Degree");

    var point_edge_parameters = {
      de_min_point_size: 1.0,
      de_max_point_size: 25.0,
      de_edge_opacity: 0.3
    }
    var de = gui.addFolder('Points and Edges Appearance');
    de.closed = false;
    de.add(point_edge_parameters, 'de_min_point_size', 0.0).name("Point Min Size").step(0.1).onChange(function () { updatePointSize(); });
    de.add(point_edge_parameters, 'de_max_point_size', 0.0).name("Point Max Size").step(0.1).onChange(function () { updatePointSize(); });
    de.add(point_edge_parameters, 'de_edge_opacity', 0.0, 1.0).name("Edge Opacity").onChange(function () { updateEdgeOpacity(); });


    var filter_community = { filter_community: false };
    gui.add(filter_community, 'filter_community').name("EDGES - Filter Community");

    var gui_community = { community: (num_of_keys - 1) }
    gui.add(gui_community, 'community', 0.0, (num_of_keys - 1)).step(1.0).name("Community Index");

    var gui_communityID = { ID: community_index_ID_dict[gui_community.community] }
    gui.add(gui_communityID, 'ID').name("Community ID").listen();

    var gui_degree_to_opacity = { EdgesOpacity: 0.0 };
    gui.add(gui_degree_to_opacity, 'EdgesOpacity', {
      None: 0.0,
      InDegree: 1.0,
      OutDegree: 2.0,
      TotalDegree: 3.0
    }).name("Edge Opacity").onChange(function () { switchOpacity(); });

    var filter_nodes = { filter: false };
    gui.add(filter_nodes, 'filter').name("NODES - Isolate Node").onChange(function () { updateNodeIsolation(); });

    function updateNodeIsolation() {
      if (!filter_nodes.filter)
        twitter_EDGES_object.material.uniforms.selected_node.value = [-1, 0.0];
      else
        twitter_EDGES_object.material.uniforms.selected_node.value = [-1, 1.0];
    }

    // update point size
    function updatePointSize() {
      twitter_NODES_object.material.uniforms.point_sizes.value = [point_edge_parameters.de_min_point_size, point_edge_parameters.de_max_point_size];
    }

    //update opacity
    function updateEdgeOpacity() {
      twitter_EDGES_object.material.uniforms.opacity.value = point_edge_parameters.de_edge_opacity;
    }

    // awful switch: update degree filters
    function switchOpacity() {
      if (gui_degree_to_opacity.EdgesOpacity == 0.0) {
        twitter_EDGES_object.material.uniforms.vertex_opacity_filter.value = [0.0, 0.0, 0.0, 1.0];
        twitter_NODES_object.material.uniforms.vertex_opacity_filter.value = [0.0, 0.0, 0.0, 1.0];
      }

      if (gui_degree_to_opacity.EdgesOpacity == 1.0) {
        twitter_EDGES_object.material.uniforms.vertex_opacity_filter.value = [1.0, 0.0, 0.0, 0.0];
        twitter_NODES_object.material.uniforms.vertex_opacity_filter.value = [1.0, 0.0, 0.0, 0.0];
      }

      if (gui_degree_to_opacity.EdgesOpacity == 2.0) {
        twitter_EDGES_object.material.uniforms.vertex_opacity_filter.value = [0.0, 1.0, 0.0, 0.0];
        twitter_NODES_object.material.uniforms.vertex_opacity_filter.value = [0.0, 1.0, 0.0, 0.0];
      }

      if (gui_degree_to_opacity.EdgesOpacity == 3.0) {
        twitter_EDGES_object.material.uniforms.vertex_opacity_filter.value = [0.0, 0.0, 1.0, 0.0];
        twitter_NODES_object.material.uniforms.vertex_opacity_filter.value = [0.0, 0.0, 1.0, 0.0];
      }
    }


    //EDGES (BUFFER GEOMETRY)
    var twitter_edges_geometry = new THREE.BufferGeometry();
    var edges_length = twitter_edges_array.length;
    console.log("NUMBER OF EDGES: " + edges_length);
    // attribute arrays
    var pos_array = new Float32Array(edges_length * 3 * 2);                         // positions
    var degree_indegree_outdegree_array = new Float32Array(edges_length * 4 * 2);   // degrees: source_in, source_out, dest_in. dest_out
    var edges_color_array = new Float32Array(edges_length * 4 * 2);                 // color, community_Id
    var source_destination = new Float32Array(edges_length * 3 * 2);                // source_index, destination_index, is_source (1 for source vertex, 0 for destination)

    for (var edges_i = 0; edges_i < twitter_edges_array.length; edges_i++) {

      var destination = twitter_edges_array[edges_i][0];
      var source = twitter_edges_array[edges_i][1];

      var source_index = -1;
      var destination_index = -1;

      // find destination index
      for (var d_row = 0; d_row < twitter_nodes_array.length; d_row++) {
        if (twitter_nodes_array[d_row][2] == destination) {
          destination_index = d_row;
        }
      }
      if (isNaN(parseFloat(twitter_nodes_array[destination_index][14]))) {
        console.log("Not a number");
      }
      if (isNaN(parseFloat(twitter_nodes_array[destination_index][15]))) {
        console.log("Not a number");
      }
      // fill destination position attribute array
      pos_array[edges_i * 6 + 3] = parseFloat(twitter_nodes_array[destination_index][14]) / scaleFactor;
      pos_array[edges_i * 6 + 4] = parseFloat(twitter_nodes_array[destination_index][15]) / scaleFactor;
      pos_array[edges_i * 6 + 5] = 0.0;

      // find source index
      for (var s_row = 0; s_row < twitter_nodes_array.length; s_row++) {
        if (twitter_nodes_array[s_row][2] == source) {
          source_index = s_row;
        }
      }
      if (isNaN(parseFloat(twitter_nodes_array[source_index][14]))) {
        console.log("S&D: " + source + ",  " + destination);
        console.log("Not a number: " + edges_i + ", " + twitter_nodes_array[source_index][14]);
      }
      if (isNaN(parseFloat(twitter_nodes_array[source_index][15]))) {
        console.log("Not a number: " + edges_i + ", " + twitter_nodes_array[source_index][15]);
      }
      // fill source position attribute array
      pos_array[edges_i * 6 + 0] = parseFloat(twitter_nodes_array[source_index][14]) / scaleFactor;
      pos_array[edges_i * 6 + 1] = parseFloat(twitter_nodes_array[source_index][15]) / scaleFactor;
      pos_array[edges_i * 6 + 2] = 0.0;

      // fill source destination arrays
      source_destination[edges_i * 6 + 0] = parseFloat(source_index);
      source_destination[edges_i * 6 + 1] = parseFloat(destination_index);
      source_destination[edges_i * 6 + 2] = 1.0;
      source_destination[edges_i * 6 + 3] = parseFloat(source_index);
      source_destination[edges_i * 6 + 4] = parseFloat(destination_index);
      source_destination[edges_i * 6 + 5] = 0.0;

      // get degrees
      var source_in_degree = parseFloat(twitter_nodes_array[source_index][9]);
      var source_out_degree = parseFloat(twitter_nodes_array[source_index][10]);
      var destination_in_degree = parseFloat(twitter_nodes_array[destination_index][9]);
      var destination_out_degree = parseFloat(twitter_nodes_array[destination_index][10]);
      var v_min_opacity = 0.1;

      // fill degrees attribute ( normalized between v_min_opacity and 1.0 )
      // output = output_start + ((output_end - output_start) / (input_end - input_start)) * (input - input_start)
      degree_indegree_outdegree_array[edges_i * 8 + 0] = v_min_opacity + ((1.0 - v_min_opacity) / (max_in_degree - min_in_degree)) * (source_in_degree - min_in_degree);
      degree_indegree_outdegree_array[edges_i * 8 + 1] = v_min_opacity + ((1.0 - v_min_opacity) / (max_out_degree - min_out_degree)) * (source_out_degree - min_out_degree);
      degree_indegree_outdegree_array[edges_i * 8 + 2] = v_min_opacity + ((1.0 - v_min_opacity) / (max_in_degree - min_in_degree)) * (destination_in_degree - min_in_degree);
      degree_indegree_outdegree_array[edges_i * 8 + 3] = v_min_opacity + ((1.0 - v_min_opacity) / (max_out_degree - min_out_degree)) * (destination_out_degree - min_out_degree);

      degree_indegree_outdegree_array[edges_i * 8 + 4] = v_min_opacity + ((1.0 - v_min_opacity) / (max_in_degree - min_in_degree)) * (source_in_degree - min_in_degree);
      degree_indegree_outdegree_array[edges_i * 8 + 5] = v_min_opacity + ((1.0 - v_min_opacity) / (max_out_degree - min_out_degree)) * (source_out_degree - min_out_degree);
      degree_indegree_outdegree_array[edges_i * 8 + 6] = v_min_opacity + ((1.0 - v_min_opacity) / (max_in_degree - min_in_degree)) * (destination_in_degree - min_in_degree);
      degree_indegree_outdegree_array[edges_i * 8 + 7] = v_min_opacity + ((1.0 - v_min_opacity) / (max_out_degree - min_out_degree)) * (destination_out_degree - min_out_degree);

      // fill community color and community id
      var p_source_community = twitter_nodes_array[source_index][1];
      edges_color_array[edges_i * 8 + 0] = community_color_dict[p_source_community][0];
      edges_color_array[edges_i * 8 + 1] = community_color_dict[p_source_community][1];
      edges_color_array[edges_i * 8 + 2] = community_color_dict[p_source_community][2];
      edges_color_array[edges_i * 8 + 3] = parseFloat(p_source_community);

      edges_color_array[edges_i * 8 + 4] = community_color_dict[p_source_community][0];
      edges_color_array[edges_i * 8 + 5] = community_color_dict[p_source_community][1];
      edges_color_array[edges_i * 8 + 6] = community_color_dict[p_source_community][2];
      edges_color_array[edges_i * 8 + 7] = parseFloat(p_source_community);

    }

    // EDGES add attributes to vertex buffer
    twitter_edges_geometry.addAttribute('position', new THREE.BufferAttribute(pos_array, 3));
    twitter_edges_geometry.addAttribute('source_degrees', new THREE.BufferAttribute(degree_indegree_outdegree_array, 4));
    twitter_edges_geometry.addAttribute('source_community_color', new THREE.BufferAttribute(edges_color_array, 4));
    twitter_edges_geometry.addAttribute('source_destination', new THREE.BufferAttribute(source_destination, 3));

    // check values in edges
    for (var i = 0; i < 6; i += 3.0) {
      console.log("sd: " + source_destination[i + 0] + ",  " + source_destination[i + 1] + ",  " + source_destination[i + 2]);
    }

    // EDGES shader material
    var twitter_edges_shader_material = new THREE.ShaderMaterial({
      uniforms: {
        opacity: { value: point_edge_parameters.de_edge_opacity },
        community_filter: { value: [0.0, 0.0] },
        vertex_opacity_filter: { value: [0.0, 0.0, 0.0, 1.0] },
        selected_node: { value: [-1.0, 0.0] }
      },
      vertexShader: document.getElementById('edges_vertexshader').textContent,
      fragmentShader: document.getElementById('edges_fragmentshader').textContent,
      blending: THREE.NormalBlending,
      depthTest: false,
      transparent: true
    });
    var twitter_EDGES_object = new THREE.LineSegments(twitter_edges_geometry, twitter_edges_shader_material);




    // SELECT OBJECT
    var select_geometry = new THREE.TorusGeometry(10, 1, 4, 64);
    var select_material = new THREE.MeshBasicMaterial({ color: 0xff0000, transparent: false, opacity: 1.0 });
    var select_object = new THREE.Mesh(select_geometry, select_material);
    select_object.visible = false;




    // NODE LABEL: DOM ELEMENT for TEXTURE 
    // create canvas element
    var nodeLabel_canvas = document.createElement('canvas');
    var ctx = nodeLabel_canvas.getContext('2d');
    //
    nodeLabel_canvas.width = 4096;
    nodeLabel_canvas.height = 4096;
    //
    // set context properties
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, nodeLabel_canvas.width, nodeLabel_canvas.height);
    ctx.fillStyle = '#000000';
    ctx.textAlign = "center";
    ctx.font = "12px Courier";
    //
    var max_handle_width = -1;
    var max_handle_height = -1;
    //
    // check width of the twitter handles
    for (var row_i = 0; row_i < nodes_length; row_i++) {
      var twitter_handle = twitter_nodes_array[row_i][2];
      var h_width = ctx.measureText(twitter_handle).width

      if (h_width > max_handle_width)
        max_handle_width = h_width;
    }
    console.log("Max handle width: " + max_handle_width);
    //
    // write handle neames in the canvas element
    for (var y_i = 256; y_i > 0; y_i--) {
      for (var x_i = 0; x_i < 32; x_i++) {
        var index = parseInt((256 - y_i) * 32 + x_i)
        //console.log(index);
        if (index < nodes_length - 1) {
          var handle = twitter_nodes_array[index][2];
          if (typeof handle !== 'undefined') {
            offset_x = x_i * 128;
            offset_y = y_i * 16;
            ctx.fillText(handle, offset_x + 64, offset_y - 4)
          }
        }
      }
    }
    //
    // create texture based on the canvas element
    var canvas_texture = new THREE.CanvasTexture(canvas = nodeLabel_canvas, format = THREE.AlphaFormat, magFilter = THREE.NearestFilter, minFilter = THREE.NearestFilter);
    //
    // NODE LABEL QUADS
    var twitter_nodeLabel_geometry = new THREE.BufferGeometry();
    //attribute arrays
    var nodeLabel_position_array = new Float32Array(nodes_length * 6 * 3);          // positions
    var nodeLabel_uv_array = new Float32Array(nodes_length * 6 * 2);                // uv coordinates2
    //
    // NODE LABELS: fill buffer
    var label_scale = 10.0;
    var y_label_offset = 2.0;
    //
    for (var row_i = 0; row_i < nodes_length; row_i++) {
      node_x_pos = parseFloat(twitter_nodes_array[row_i][14]) / scaleFactor;
      node_y_pos = parseFloat(twitter_nodes_array[row_i][15]) / scaleFactor;

      vertex_0_x = node_x_pos - 128.0 / 2.0 / label_scale;
      vertex_0_y = node_y_pos - 16.0 / 2.0 / label_scale + y_label_offset;

      vertex_1_x = node_x_pos + 128.0 / 2.0 / label_scale;
      vertex_1_y = node_y_pos - 16.0 / 2.0 / label_scale + y_label_offset;

      vertex_2_x = node_x_pos - 128.0 / 2.0 / label_scale;
      vertex_2_y = node_y_pos + 16.0 / 2.0 / label_scale + y_label_offset;

      vertex_3_x = node_x_pos + 128.0 / 2.0 / label_scale;
      vertex_3_y = node_y_pos - 16.0 / 2.0 / label_scale + y_label_offset;

      vertex_4_x = node_x_pos + 128.0 / 2.0 / label_scale;
      vertex_4_y = node_y_pos + 16.0 / 2.0 / label_scale + y_label_offset;

      vertex_5_x = node_x_pos - 128.0 / 2.0 / label_scale;
      vertex_5_y = node_y_pos + 16.0 / 2.0 / label_scale + y_label_offset;

      nodeLabel_position_array[row_i * 18 + 0] = vertex_0_x;
      nodeLabel_position_array[row_i * 18 + 1] = vertex_0_y;
      nodeLabel_position_array[row_i * 18 + 2] = 0.0;
      nodeLabel_position_array[row_i * 18 + 3] = vertex_1_x;
      nodeLabel_position_array[row_i * 18 + 4] = vertex_1_y;
      nodeLabel_position_array[row_i * 18 + 5] = 0.0;
      nodeLabel_position_array[row_i * 18 + 6] = vertex_2_x;
      nodeLabel_position_array[row_i * 18 + 7] = vertex_2_y;
      nodeLabel_position_array[row_i * 18 + 8] = 0.0;
      nodeLabel_position_array[row_i * 18 + 9] = vertex_3_x;
      nodeLabel_position_array[row_i * 18 + 10] = vertex_3_y;
      nodeLabel_position_array[row_i * 18 + 11] = 0.0;
      nodeLabel_position_array[row_i * 18 + 12] = vertex_4_x;
      nodeLabel_position_array[row_i * 18 + 13] = vertex_4_y;
      nodeLabel_position_array[row_i * 18 + 14] = 0.0;
      nodeLabel_position_array[row_i * 18 + 15] = vertex_5_x;
      nodeLabel_position_array[row_i * 18 + 16] = vertex_5_y;
      nodeLabel_position_array[row_i * 18 + 17] = 0.0;

      uv_index_v = parseInt(row_i / 32);
      uv_index_u = parseInt(row_i % 256);

      vertex_0_u = uv_index_u * 128 / 4096;
      vertex_0_v = uv_index_v * 16 / 4096;

      vertex_1_u = (uv_index_u + 1) * 128 / 4096;
      vertex_1_v = uv_index_v * 16 / 4096;

      vertex_2_u = uv_index_u * 128 / 4096;
      vertex_2_v = (uv_index_v + 1) * 16 / 4096;

      vertex_3_u = (uv_index_u + 1) * 128 / 4096;
      vertex_3_v = uv_index_v * 16 / 4096;

      vertex_4_u = (uv_index_u + 1) * 128 / 4096;
      vertex_4_v = (uv_index_v + 1) * 16 / 4096;

      vertex_5_u = uv_index_u * 128 / 4096;
      vertex_5_v = (uv_index_v + 1) * 16 / 4096;

      nodeLabel_uv_array[row_i * 12 + 0] = vertex_0_u;
      nodeLabel_uv_array[row_i * 12 + 1] = vertex_0_v;

      nodeLabel_uv_array[row_i * 12 + 2] = vertex_1_u;
      nodeLabel_uv_array[row_i * 12 + 3] = vertex_1_v;

      nodeLabel_uv_array[row_i * 12 + 4] = vertex_2_u;
      nodeLabel_uv_array[row_i * 12 + 5] = vertex_2_v;

      nodeLabel_uv_array[row_i * 12 + 6] = vertex_3_u;
      nodeLabel_uv_array[row_i * 12 + 7] = vertex_3_v;

      nodeLabel_uv_array[row_i * 12 + 8] = vertex_4_u;
      nodeLabel_uv_array[row_i * 12 + 9] = vertex_4_v;

      nodeLabel_uv_array[row_i * 12 + 10] = vertex_5_u;
      nodeLabel_uv_array[row_i * 12 + 11] = vertex_5_v;
    }
    //
    // NODE LABELS: set attributes
    twitter_nodeLabel_geometry.addAttribute('position', new THREE.BufferAttribute(nodeLabel_position_array, 3));
    twitter_nodeLabel_geometry.addAttribute('uv', new THREE.BufferAttribute(nodeLabel_uv_array, 2));
    //
    // NODE LABELS: shader material
    var twitter_nodeLabel_shader_material = new THREE.ShaderMaterial({
      uniforms: {
        in_texture: { value: canvas_texture }
      },
      vertexShader: document.getElementById('nodeLabel_vertexshader').textContent,
      fragmentShader: document.getElementById('nodeLabel_fragmentshader').textContent,
      blending: THREE.NormalBlending,
      depthTest: false,
      transparent: true
    });
    //
    // NODE LABELS: create mesh object
    var twitter_NODE_LABEL_object = new THREE.Mesh(twitter_nodeLabel_geometry, twitter_nodeLabel_shader_material);
    twitter_NODE_LABEL_object.drawMode = THREE.TrianglesDrawMode;




    // ADD ALL OBJECTS TO SCENE
    scene.add(twitter_NODE_LABEL_object);
    scene.add(twitter_EDGES_object);
    scene.add(twitter_NODES_object);
    scene.add(select_object);

    // object for picking/raycasting
    var point_cloud = [twitter_NODES_object];




    // RENDER
    var render = function () {

      //update uniforms      
      twitter_NODES_object.material.uniforms.camera_z.value = camera.zoom;

      var community_index = gui_community.community;
      var community_ID = community_index_ID_dict[parseInt(community_index)];
      gui_communityID.ID = community_ID;
      //console.log(community_ID);
      twitter_EDGES_object.material.uniforms.community_filter.value = [community_ID, filter_community.filter_community];


      requestAnimationFrame(render);
      if (cube_object_spawned) {
        cube_object.rotation.x += 0.1;
        cube_object.rotation.y += 0.1;
      }
      //controls.update();
      renderer.render(scene, camera);

    };


    // RAYCASTING EVENT HANDLER
    var raycaster = new THREE.Raycaster();
    var mouse = new THREE.Vector2();
    raycaster.params.Points.threshold = 2.0;

    function raycast(event) {
      console.log("Mouse click event.");

      //1. sets the mouse position with a coordinate system where the center
      mouse.x = (event.clientX / renderer.domElement.clientWidth) * 2 - 1;
      mouse.y = - (event.clientY / renderer.domElement.clientHeight) * 2 + 1;
      console.log("Mouse click: " + mouse.x + ",  " + mouse.x);


      //2. set the picking ray from the camera position and mouse coordinates
      raycaster.setFromCamera(mouse, camera);
      console.log("Mouse click: " + raycaster.ray.origin.x + ", " + raycaster.ray.origin.y + ", " + raycaster.ray.origin.z + "; "
        + raycaster.ray.direction.x + ", " + raycaster.ray.direction.y + ", " + raycaster.ray.direction.z);

      //3. compute intersections
      var intersects = raycaster.intersectObjects(point_cloud);
      var index = intersects[0].index;

      console.log(twitter_nodes_array[index][2]);
      console.log(index);
      var isolate = filter_nodes.filter;
      isolate = isolate ? 1.0 : 0.0;
      console.log(parseFloat(isolate));
      twitter_EDGES_object.material.uniforms.selected_node.value = [parseFloat(index), isolate];

      //4. fill clicked node info
      clicked_node_info.cn_name = twitter_nodes_array[index][2];
      clicked_node_info.cn_community_id = twitter_nodes_array[index][1];
      var community_id_val = -1
      for (const [key, value] of Object.entries(community_index_ID_dict)) {
        if (value == twitter_nodes_array[index][1]) {
          community_id_val = key;
          break;
        }
      }
      clicked_node_info.cn_community_index = community_id_val;
      clicked_node_info.cn_in_degree = twitter_nodes_array[index][9];
      clicked_node_info.cn_out_degree = twitter_nodes_array[index][10];

      //5. position select sphere
      var new_position = intersects[0].point;
      var x_pos = parseFloat(twitter_nodes_array[index][14]) / scaleFactor;
      var y_pos = parseFloat(twitter_nodes_array[index][15]) / scaleFactor;
      select_object.visible = true;
      select_object.position.set(x_pos, y_pos, 0);
    }

    function onDocumentTouchEnd(event) {
      console.log("Touch event.");
      var touches = event.changedTouches;
      console.log(touches[0]);

      //1. sets the mouse position with a coordinate system where the center
      mouse.x = (touches[0].pageX / renderer.domElement.clientWidth) * 2 - 1;
      mouse.y = - (touches[0].pageY / renderer.domElement.clientHeight) * 2 + 1;
      console.log("Touch event: " + mouse.x + ",  " + mouse.x);


      //2. set the picking ray from the camera position and mouse coordinates
      raycaster.setFromCamera(mouse, camera);
      console.log("Touch event: " + raycaster.ray.origin.x + ", " + raycaster.ray.origin.y + ", " + raycaster.ray.origin.z + "; "
        + raycaster.ray.direction.x + ", " + raycaster.ray.direction.y + ", " + raycaster.ray.direction.z);

      //3. compute intersections
      var intersects = raycaster.intersectObjects(point_cloud);
      var index = intersects[0].index;

      console.log(twitter_nodes_array[index][2]);
      console.log(index);
      var isolate = filter_nodes.filter;
      isolate = isolate ? 1.0 : 0.0;
      console.log(parseFloat(isolate));
      twitter_EDGES_object.material.uniforms.selected_node.value = [parseFloat(index), isolate];

      //4. fill clicked node info
      clicked_node_info.cn_name = twitter_nodes_array[index][2];
      clicked_node_info.cn_community_id = twitter_nodes_array[index][1];
      var community_id_val = -1
      for (const [key, value] of Object.entries(community_index_ID_dict)) {
        if (value == twitter_nodes_array[index][1]) {
          community_id_val = key;
          break;
        }
      }
      clicked_node_info.cn_community_index = community_id_val;
      clicked_node_info.cn_in_degree = twitter_nodes_array[index][9];
      clicked_node_info.cn_out_degree = twitter_nodes_array[index][10];

      //5. position select sphere
      var new_position = intersects[0].point;
      var x_pos = parseFloat(twitter_nodes_array[index][14]) / scaleFactor;
      var y_pos = parseFloat(twitter_nodes_array[index][15]) / scaleFactor;
      select_object.visible = true;
      select_object.position.set(x_pos, y_pos, 0);
    }

    render();
  </script>
</body>

</html>